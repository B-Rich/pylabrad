SOURCEFORGE:
	TODO before upload:
		values
	data backup

GENERAL:
	configuration system:
		config files can go in labrad/config
			but this 
		need a class to manage reading/writing and persisting config
		allow overrides per-user, per-session, etc.

	data handling:
		numpy (and other flatteners/unflatteners)
		flatten/unflatten to a generic labRAD data type
			convert to python data on demand
		allow conversion to/from array of cluster of values and numpy array

	request cancellation/context expiration
        send context expiration when requests are cancelled (client)
	
	context-cloning of wrappers
	signals and slots (multiple dispatch, loose coupling):
		disconnect listeners when a server disconnects
		automatically reestablish signal/slot connections (optional)
		mechanism to declare slots on servers
		dispatcher server to manage signal/slot connections of other servers
		queueable message handlers (with correct handling of deferreds)
		thread-safe message queues on the client side
		use weak references when connecting listeners?
		build this directly into LabRAD
	
    - make client restartable (can disconnect/reconnect same cxn object)
    
	contexts:
        servers can provide custom context objects (not just dict)
        hooks for context creation and destruction (not just deepcopy)
        access self.client through context so that contexts get
            propagated correctly (this makes cancellation work correctly)
        sign up for and handle request expiration messages
	
	testing:
		need to be able to start and stop servers from inside tests
		quantify code converage (how?)
		generate lots of random data (good and mal-formed)
		profiling for data flatten/unflatten operations to test speed
		test setting decorator
    
	configuration:
		system to setup hostname, nodenames, port, passwords, etc.
	
	logging
        configure twisted logging (less verbose when using util.runServer)
        allow logs to be accessed and manipulated remotely
		configurable debug/logging verbosity levels (change on the fly)
		
    distribution
        easy_install
		PyPI: python setup.py register
			http://docs.python.org/dist/postinstallation-script.html
		
    tutorial mode for beginners
    code/API documentation (epydoc, pydoctor/lore, pydoc)
    
SERVERS:
    NODE:
        set logging levels
		node config files:
			set servers to be started on initial login
			set servers to be auto-restarted if they die
			make node configuration accessible/modifiable remotely
		server config files:
			declare dependencies to be auto-started

	PREAMP SERVER:
        allow querying of state, not just setting

	DATA SERVER:
        add comments to sessions and datasets
        dataset summary
        searching/sorting

    CLIENT:
        separate views of servers in a context
		caching broken if setting numbers change
        bulletproofing
            make disconnect work cleanly
        some settings invisible by default (e.g. logging stuff)?
        asynchronous client use dynamic dispatch (tab-completion not needed)
        
    CONTROLLER:
        make it bulletproof
			error messages displayed inline, not in separate pages
        allow viewing of logs/setting log levels
		allow setting environment vars when starting servers
		make pages for each server that let you browse settings (online help)
		AJAXify
		encrypt if possible

    test device model
    generic getters and setters, can we expose properties?
    save/load data and configuration
    server modes:
        immediate- changes happen immediately
        lazy- changes stored in context, synchronized later
    