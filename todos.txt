SOURCEFORGE:
	data backup
    
    website
    
    documentation
        tutorial
        API docs
	
	build script:
		bdist_wininst
		sdist --format=zip
		sdist --format=gztar
		upload to sourceforge

GENERAL:
    framework cleanup
        mark methods that can be overridden, should not be overridden, etc.
        templates for servers and clients

	config overrides in places other than labrad.config
        - per-user, per-session, etc.
        - this is mostly a development issue
    save/load data and configuration
        - save config in registry where possible, but allow local override
        
	request cancellation/context expiration
        send context expiration when requests are cancelled (client)
	
	context-cloning of wrappers
    
	signals and slots (multiple dispatch, loose coupling):
		disconnect listeners when a server disconnects
        error handling in signal/slot and messaging mechanisms
    
    testing:
		need to be able to start and stop servers from inside tests
		quantify code converage (how?)
		generate lots of random data (good and mal-formed)
		profiling for data flatten/unflatten operations to test speed
		test setting decorator
        test reversible eval and repr of labrad data
        test device model
    
	logging
        configure twisted logging (less verbose when using util.runServer)
        allow logs to be accessed and manipulated remotely
		configurable debug/logging verbosity levels (change on the fly)
    
	contexts:
        servers can provide custom context objects (not just dict)
        hooks for context creation and destruction (not just deepcopy)
        access self.client through context so that contexts get
            propagated correctly (this makes cancellation work correctly)
        sign up for and handle request expiration messages
		
    distribution
        easy_install
		PyPI: python setup.py register
			http://docs.python.org/dist/postinstallation-script.html
		
    tutorial mode for beginners
    code/API documentation (epydoc, pydoctor/lore, pydoc)
    
SERVERS:
    NODE:
        set logging levels
		node config files:
			set servers to be started on initial login
			set servers to be auto-restarted if they die
			make node configuration accessible/modifiable remotely
		server config files:
			declare dependencies to be auto-started

    CONTROLLER:
        make server output visible (and clearable, etc.) in the browser
        access all node settings remotely (e.g. directories)
        
    CLIENT:
        signal listeners need to be removed if a server disconnects
        separate views of servers in different context
		caching needs to be updated if setting numbers change
        bulletproofing
            make disconnect work cleanly
            make request cancellation work cleanly
        some settings invisible by default (e.g. logging stuff)?
        asynchronous client use dynamic dispatch (tab-completion not needed)
    
    DATA VAULT:
        add comments to sessions and datasets
        dataset summary
        searching/sorting
        
    PREAMP SERVER:
        allow querying of state, not just setting

    