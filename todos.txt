GENERAL:
    Client/ClientAsync:
        create clones that work in different contexts by default
        implement generic flattened version of a packet that can be forwarded
            to do this, probably need a 'Flattened' data type, that is a special string with a type tag or something
    
	logging:
		make self.log work in a reasonable way before servers have started serving
        allow logs to be accessed and manipulated remotely
		configurable debug/logging verbosity levels (change on the fly)
    
    message handling:
    	declarative message handling for servers and clients
    	do this with decorators, similar to @setting
    
SERVERS:
	GENERAL:
		emit log messages and allow setting log levels
        add manhole interface to allow for remote inspection/debugging

    NODE:
        more flexible configuration of startup/shutdown options for servers
        incorporate node-readable configuration directly into source code (rather than separate .ini file)
            this could be in a specially formatted comment
            other languages could also do this in a comment as long as it gets incorporated in the source
            alternatively, we could launch a subinterpreter and execute the file, then load the info from it

    SUPER NODE:
        ask for a server to be started
            supernode looks up the location to run the server in the registry
    
    CONTROLLER:
    	show servers that are not running on a node
        make server output visible (and clearable, etc.) in the browser
        access all node settings remotely (e.g. directories, environment variables)
        run multiple server instances on one node (set environment variables for each, etc.)
        visual indication when no nodes are connected
        visual indication when connection to LabRAD or controller is lost
        renegotiate connection automatically after loss
        

