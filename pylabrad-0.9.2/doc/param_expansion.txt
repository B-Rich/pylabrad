getargspec(func)
    Get the names and default values of a function's arguments. A tuple of four things is returned: (args, varargs, varkw, defaults). args is a list of the argument names (it may contain nested lists). varargs and varkw are the names of the * and ** arguments or None. defaults is a tuple of default argument values or None if there are no default arguments; if this tuple has n elements, they correspond to the last n elements listed in args.

Np = len(args) = total # of parameters    
Nr = len(args) - len(defaults) = # of required parameters

if Np == 0:
    only allowed signature is ''

if Np == 1:
    if Nr == 0 and data is None:
        nothing passed in for param, so default is used
    otherwise:
        entire data is passed as first argument

if Np > 1:
    if Nr == 0:
        '' is allowed
        if data is None:
            nothing passed in, so defaults are used
    
    otherwise:
        clusters are *always* expanded when calling setting
        Thus, only clusters whose length is between Nr and Np are allowed


setting(1, s1=['s'], s2=['s'], s3=['s'], returns=[])
def blah(self, c, s1, s2='optional', s3='optional'):
    pass
    
    - allowed signatures are '(s{s1}, s{s2}, s{s3})', '(s{s1}, s{s2})', '(s{s3})'
    
setting(1, s1=['s', 'w'], s2=['s', 'w'], returns=[])
def blah(self, c, p1, p2='optional'):
    pass
    
    - allowed signatures are
        '(s{p1}, s{p2})',
        '(s{p1}, w{p2})',
        '(w{p1}, s{p2})',
        '(w{p1}, w{p2})'
        '(s{p1})',
        '(w{p1})'
